{"ast":null,"code":"import { MongoClient } from 'mongodb'; // Dit is de backend code\n\nasync function handler(req, res) {\n  if (res.method === 'POST') {\n    //check of het request is POST\n    const {\n      email,\n      name,\n      message\n    } = JSON.parse(req.body); // validation (check of het wel een juiste e-mail, naam, message is)\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'Onjuiste input.'\n      });\n      return;\n    } // opslaan in een database\n\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    console.log(newMessage); // Connectie maken met de database\n\n    let client;\n\n    try {\n      client = await MongoClient.connect('mongodb+srv://christian:newCBR650@cluster0.1y5ew.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n    } catch (error) {\n      res.status(500).json({\n        message: 'Geen connectie met de database.'\n      });\n      return;\n    }\n\n    const db = client.db(); // interactie met de database\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: 'Opslaan is niet gelukt.'\n      });\n      return;\n    } // sluiten van de connectie\n\n\n    client.close();\n    res.status(201).json({\n      message: 'Ok, opgeslagen!',\n      message: newMessage\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/christianmarginet/Documents/next-Frontend/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","JSON","parse","body","includes","trim","status","json","newMessage","console","log","client","connect","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CAEA;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAChC,MAAIA,GAAG,CAACC,MAAJ,KAAe,MAAnB,EAA2B;AAC1B;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,CAAjC,CAF0B,CAG1B;;AACA,QACC,CAACL,KAAD,IACA,CAACA,KAAK,CAACM,QAAN,CAAe,GAAf,CADD,IAEA,CAACL,IAFD,IAGAA,IAAI,CAACM,IAAL,OAAgB,EAHhB,IAIA,CAACL,OAJD,IAKAA,OAAO,CAACK,IAAR,OAAmB,EANpB,EAOE;AACDT,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA,KAdyB,CAe1B;;;AACA,UAAMQ,UAAU,GAAG;AAClBV,MAAAA,KADkB;AAElBC,MAAAA,IAFkB;AAGlBC,MAAAA;AAHkB,KAAnB;AAKAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EArB0B,CAuB1B;;AAEA,QAAIG,MAAJ;;AAEA,QAAI;AACDA,MAAAA,MAAM,GAAG,MAAMlB,WAAW,CAACmB,OAAZ,CAChB,0GADgB,CAAf;AAGF,KAJD,CAIE,OAAOC,KAAP,EAAc;AACfjB,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAED,UAAMc,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX,CApC0B,CAsC1B;;AAEA,QAAI;AACH,YAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCT,UAApC,CAArB;AACAA,MAAAA,UAAU,CAACU,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACA,KAHD,CAGE,OAAON,KAAP,EAAc;AACfF,MAAAA,MAAM,CAACS,KAAP;AACAxB,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA,KA/CyB,CAiD1B;;;AAEAW,IAAAA,MAAM,CAACS,KAAP;AAEAxB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEP,MAAAA,OAAO,EAAE,iBAAX;AAA8BA,MAAAA,OAAO,EAAEQ;AAAvC,KAArB;AACA;AACD;;AAID,eAAed,OAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\n// Dit is de backend code\n\nasync function handler(req, res) {\n\tif (res.method === 'POST') {\n\t\t//check of het request is POST\n\t\tconst { email, name, message } = JSON.parse(req.body);\n\t\t// validation (check of het wel een juiste e-mail, naam, message is)\n\t\tif (\n\t\t\t!email ||\n\t\t\t!email.includes('@') ||\n\t\t\t!name ||\n\t\t\tname.trim() === '' ||\n\t\t\t!message ||\n\t\t\tmessage.trim() === ''\n\t\t) {\n\t\t\tres.status(422).json({ message: 'Onjuiste input.' });\n\t\t\treturn;\n\t\t}\n\t\t// opslaan in een database\n\t\tconst newMessage = {\n\t\t\temail,\n\t\t\tname,\n\t\t\tmessage,\n\t\t};\n\t\tconsole.log(newMessage);\n\n\t\t// Connectie maken met de database\n\n\t\tlet client;\n\n\t\ttry {\n\t\t   client = await MongoClient.connect(\n\t\t\t\t'mongodb+srv://christian:newCBR650@cluster0.1y5ew.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tres.status(500).json({ message: 'Geen connectie met de database.' });\n\t\t\treturn;\n\t\t}\n\n\t\tconst db = client.db();\n\n\t\t// interactie met de database\n\n\t\ttry {\n\t\t\tconst result = await db.collection('messages').insertOne(newMessage);\n\t\t\tnewMessage.id = result.insertedId;\n\t\t} catch (error) {\n\t\t\tclient.close();\n\t\t\tres.status(500).json({ message: 'Opslaan is niet gelukt.' });\n\t\t\treturn;\n\t\t}\n\n\t\t// sluiten van de connectie\n\n\t\tclient.close();\n\n\t\tres.status(201).json({ message: 'Ok, opgeslagen!', message: newMessage });\n\t}\n}\n\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}