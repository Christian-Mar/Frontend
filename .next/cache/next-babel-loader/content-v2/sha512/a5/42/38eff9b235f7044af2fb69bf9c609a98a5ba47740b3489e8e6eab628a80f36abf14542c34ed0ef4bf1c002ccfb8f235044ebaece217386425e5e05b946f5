{"ast":null,"code":"import { MongoClient } from 'mongodb'; // Dit is de backend code\n\nasync function handler(req, res) {\n  if (res.method === 'POST') {\n    //check of het request is POST\n    const {\n      email,\n      name,\n      message\n    } = req.body; // validation (check of het wel een juiste e-mail, naam, message is)\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'Onjuiste input.'\n      });\n      return;\n    } // opslaan in een database\n\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    console.log(newMessage); // Connectie maken met de database\n\n    let client;\n\n    try {\n      const client = await MongoClient.connect('mongodb+srv://christian:newCBR650@cluster0.1y5ew.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n    } catch (error) {\n      res.status(500).json({\n        message: 'Geen connectie met de database.'\n      });\n      return;\n    }\n\n    const db = client.db(); // interactie met de database\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: 'Opslaan is niet gelukt.'\n      });\n      return;\n    } // sluiten van de connectie\n\n\n    client.close();\n    res.status(201).json({\n      message: 'Ok, opgeslagen!',\n      message: newMessage\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/christianmarginet/Documents/next-Frontend/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","body","includes","trim","status","json","newMessage","console","log","client","connect","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CAEA;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAChC,MAAIA,GAAG,CAACC,MAAJ,KAAe,MAAnB,EAA2B;AAAE;AAC5B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BL,GAAG,CAACM,IAArC,CAD0B,CAExB;;AACF,QACC,CAACH,KAAD,IACA,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CADD,IAEA,CAACH,IAFD,IAGAA,IAAI,CAACI,IAAL,OAAgB,EAHhB,IAIA,CAACH,OAJD,IAKAA,OAAO,CAACG,IAAR,OAAmB,EANpB,EAQA;AACCP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACL,QAAAA,OAAO,EAAE;AAAV,OAArB;AACA;AACA,KAdyB,CAexB;;;AACA,UAAMM,UAAU,GAAG;AACfR,MAAAA,KADe;AAEfC,MAAAA,IAFe;AAGfC,MAAAA;AAHe,KAAnB;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EArBwB,CAuBxB;;AAEA,QAAIG,MAAJ;;AAEA,QAAI;AAEF,YAAMA,MAAM,GAAG,MAAMhB,WAAW,CAACiB,OAAZ,CACnB,0GADmB,CAArB;AAGD,KALD,CAKE,OAAOC,KAAP,EAAc;AACdf,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACL,QAAAA,OAAO,EAAE;AAAV,OAArB;AACA;AACD;;AAED,UAAMY,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX,CArCwB,CAuCxB;;AAEA,QAAI;AAAC,YAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCT,UAApC,CAArB;AACLA,MAAAA,UAAU,CAACU,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACD,KAFC,CAEA,OAAON,KAAP,EAAc;AACdF,MAAAA,MAAM,CAACS,KAAP;AACAtB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD,KA/CyB,CAiD1B;;;AAEAS,IAAAA,MAAM,CAACS,KAAP;AAEEtB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,MAAAA,OAAO,EAAE,iBAAX;AAA8BA,MAAAA,OAAO,EAAEM;AAAvC,KAArB;AACF;AACD;;AAID,eAAeZ,OAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\n// Dit is de backend code\n\nasync function handler(req, res) {\n\tif (res.method === 'POST') { //check of het request is POST\n\t\tconst { email, name, message } = req.body;\n    // validation (check of het wel een juiste e-mail, naam, message is)\n\t\tif (\n\t\t\t!email ||\n\t\t\t!email.includes('@') ||\n\t\t\t!name ||\n\t\t\tname.trim() === '' ||\n\t\t\t!message ||\n\t\t\tmessage.trim() === ''\n\t\t)\n\t\t{\n\t\t\tres.status(422).json({message: 'Onjuiste input.'});\n\t\t\treturn;\n\t\t}\n    // opslaan in een database\n    const newMessage = {\n        email, \n        name, \n        message,\n    };\n    console.log(newMessage);\n\n    // Connectie maken met de database\n\n    let client;\n\n    try {\n\n      const client = await MongoClient.connect(\n        'mongodb+srv://christian:newCBR650@cluster0.1y5ew.mongodb.net/myFirstDatabase?retryWrites=true&w=majority'\n      );\n    } catch (error) {\n      res.status(500).json({message: 'Geen connectie met de database.'})\n      return;\n    }\n\n    const db = client.db();\n\n    // interactie met de database\n\n    try {const result = await db.collection('messages').insertOne(newMessage);\n    newMessage.id = result.insertedId;\n  } catch (error) {\n    client.close();\n    res.status(500).json({ message: 'Opslaan is niet gelukt.'});\n    return;\n  }\n\n  // sluiten van de connectie\n\n  client.close();\n\n    res.status(201).json({ message: 'Ok, opgeslagen!', message: newMessage });\n\t}\n}\n\n\n\nexport default handler;\n\n\n"]},"metadata":{},"sourceType":"module"}